#! /usr/bin/python
from datetime import date
from datetime import timedelta
from pdb import set_trace
import sys

b=set_trace


class weight_file:
    FILE='/home/jhogan/git/priv/var/log/weight'

    @property
    def weeks(self):
        ws = weeks()
        w = pd = None
        with open(self.FILE) as f:
            for l in f:
                d = day(l)
                if not pd or d.isweekafter(pd):
                    w = ws.add(week())
                w.add(d)
                pd = d
        return ws

class weeks:
    def __init__(self):
        self._ls = []

    def add(self, w):
        self._ls.append(w)
        return w

    @property
    def count(self):
        return len(self._ls)

class week:
    def __init__(self):
        self._ls = []

    def add(self, v):
        self._ls.append(v)
        return v

    @property
    def avg(self):
        wt=0
        for d in self._ls:
            wt += d.weight
        return wt / self.count

    @property
    def count(self):
        return len(self._ls)

    @property
    def line(self):
        return self._line

    @line.setter
    def line(self, v):
        self._line = v

    def __str__(self):
        r = ''
        for d in self._ls:
            r += str(d) + "\n"
        r += "Avg: " + str(self.avg)
        return r 

class day:
    def __init__(self, l):
        self._line = line(l)

    def isweekafter(self, d):
        day = timedelta(1)
        D = d.date
        d = self.date
        if d <= D: return False

        while d > D:
            d = d - day
            if d.weekday() == 5: # Saturday
                return True
        return False

    @property
    def date(self):
        return self._line.date

    @property
    def weight(self):
        return float(self._line.weight)

    def __str__(self):
        return str(self.date) + ' ' + str(self.weight)

class line:
    def __init__(self, l):
        self._line = l

    @property
    def date(self):
        d, w = self._line.split()
        YY, mm, dd = [int(x) for x in (d[:4], d[4:6], d[6:])]
        return date(YY,mm,dd)

    @property
    def weight(self):
        return self._line.split()[1]

wt = weight_file()
for w in wt.weeks._ls:
    print(w.avg)
